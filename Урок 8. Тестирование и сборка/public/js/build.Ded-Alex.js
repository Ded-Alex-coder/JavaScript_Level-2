(()=>{"use strict";Vue.component("error",{props:["visibility"],template:'\n      <div class="error-block" v-show="visibility">\n         <h4>Не удаётся выполнить запрос к серверу!</h4>\n      </div>\n   '});const t=error;Vue.component("search",{data:()=>({userSearch:""}),template:'\n         <form action="#" class="search-form" @submit.prevent=\'$parent.$refs.products.filter(userSearch)\'>\n            <input type="text" class="search-field"\n            v-model="userSearch">\n            <button class="btn-search" type="submit">\n               <i class="fas fa-search"></i></button>\n         </form>\n   '});const e=search;Vue.component("products",{data:()=>({products:[]}),methods:{filter(t){let e=new RegExp(t,"i");this.products=this.products.filter((t=>e.test(t.product_name)))}},mounted(){this.$parent.getJson("/api/products").then((t=>{for(let e of t)this.products.push(e)}))},template:'<div class="products">\n                <h1>Каталог товаров</h1>\n                <product v-for="item of products"\n                :key="item.id_product"\n                :product="item"\n                ></product>\n               </div>'}),Vue.component("product",{props:["product"],template:'\n            <div class="product-item">\n                <img :src="product.product_img" alt="Some img">\n                <div class="desc">\n                    <h3>{{product.product_name}}</h3>\n                    <p class="product-text">Здесь будет немного текста описывающего продукт. Здесь будет немного\n                     текста описывающего\n                     продукт. Здесь будет немного текста описывающего продукт.</p>\n                    <p>{{product.price}} $</p>\n                    <button class="buy-btn" @click="$root.$refs.cart.addProduct(product)">Купить</button>\n                </div>\n            </div>\n    '});const r=products;Vue.component("cart",{data:()=>({bascet:[]}),methods:{addProduct(t){let e=this.bascet.find((e=>e.id_product===t.id_product));if(e)this.$parent.putJson(`/api/cart/${t.id_product}/${t.product_name}`,{quantity:1}).then((t=>{t.result&&e.quantity++}));else{let e=Object.assign({quantity:1},t);this.$parent.postJson(`api/cart/${t.id_product}/${t.product_name}`,e).then((t=>{t.result&&this.bascet.push(e)}))}},remove(t){t.quantity>1?this.$parent.putJson(`/api/cart/${t.id_product}/${t.product_name}`,{quantity:-1}).then((e=>{e.result&&t.quantity--})):this.$parent.delJson(`/api/cart/${t.id_product}/${t.product_name}`,t).then((e=>{e.result?this.bascet.splice(this.bascet.indexOf(t),1):console.log("error")}))}},mounted(){this.$parent.getJson("/api/cart").then((t=>{for(let e of t.contents)this.bascet.push(e)}))},template:'\n        <div class="cart">\n               <p class="cart__empty" v-if="!bascet.length">Нет выбранных товаров</p>\n               <cart-item v-for="product of bascet" :key="product.id_product" :cartItem="product"\n               @remove="remove" @add-product="addProduct">\n               </cart-item>\n            <div class="total-block" v-if="bascet.length">\n               <h3>Количество товара: {{ this.bascet.reduce((summ, item) => summ + item.quantity, 0) }} шт.</h3>\n               <h3>Общая стоимость: {{ this.bascet.reduce((summ, item) => summ + item.quantity*item.price, 0) }} $</h3>\n            </div>\n        </div>\n    '}),Vue.component("cart-item",{props:["cartItem"],template:'\n    <div class="cart-item">\n                    <div class="product-bio">\n                  <img :src="cartItem.product_img" alt="Some img">\n                  <div class="product-desc">\n                     <p class="product-title">{{cartItem.product_name}}</p>\n                     <p class="product-single-price">{{cartItem.price}} $</p>\n                     <div class="quantity">\n                        <button class="del-btn" @click="$emit(\'remove\', cartItem)">-</button>\n                        <p class="product-quantity">Количество: {{ cartItem.quantity }}</p>\n                        <button class="del-btn" @click="$emit(\'add-product\', cartItem)">+</button>\n                     </div>\n                  </div>\n               </div>\n               <div class="right-block">\n                  <p class="product-price">{{ cartItem.price * cartItem.quantity}} $</p>\n               </div>\n            </div>\n         </div>\n    '});const c=cart,s=new Vue({el:"#app",data:{showError:!1},components:{error:t,search:e,products:r,cart:c},methods:{getJson(t){return fetch(t).then((t=>t.json())).catch((t=>{this.showError=!0}))},postJson(t,e){return fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},putJson(t,e){return fetch(t,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},delJson(t,e){return fetch(t,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},showCart(){document.querySelector(".cart").classList.toggle("cart-click")},error(){let t=document.querySelector("main"),e=document.createElement("div");e.classList.add("error-block"),e.innerHTML=" Не удаётся выполнить запрос к серверу!",t.appendChild(e)}}});new Vue(s)})();